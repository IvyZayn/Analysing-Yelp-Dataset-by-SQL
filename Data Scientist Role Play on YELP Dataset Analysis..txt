Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet
Yaru Zeng

Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.


Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (id)
ii. Hours = 1562 (business_id)
iii. Category = 2643 (business_id)
iv. Attribute = 1115 (business_id)
v. Review = 10000 (id), 9581 (user_id), 8090 (business_id)
vi. Checkin = 493 (business_id)
vii. Photo = 10000 (id), 6493 (business_id)
viii. Tip = 537 (user_id), 3979 (business_id)
ix. User = 10000 (id)
x. Friend = 11 (user_id)
xi. Elite_years = 2780 (user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No.
	
	
	SQL code used to arrive at answer:
	
SELECT COUNT(*)
FROM user
WHERE 
	(name IS NULL)
	OR (review_count IS NULL)
	OR (yelping_since IS NULL)
	OR (useful IS NULL)
	OR (funny IS NULL)
	OR (cool IS NULL)
	OR (fans IS NULL)
	OR (average_stars IS NULL)
	OR (compliment_hot IS NULL)
	OR (compliment_more IS NULL)
	OR (compliment_profile IS NULL)
	OR (compliment_cute IS NULL)
	OR (compliment_list IS NULL)
	OR (compliment_note IS NULL)
	OR (compliment_plain IS NULL)
	OR (compliment_cool IS NULL)
	OR (compliment_funny IS NULL)
	OR (compliment_writer IS NULL)
	OR (compliment_photos IS NULL)
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT 
	city
	, SUM(review_count)
FROM business
GROUP BY city
ORDER BY SUM(review_count) DESC
	
	Copy and Paste the Result Below:
+-----------------+-------------------+
| city            | SUM(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT 
	stars AS star_rating
	, COUNT(stars) AS count
FROM business
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT 
	stars AS star_rating
	, COUNT(stars) AS count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT 
	id
	, name
	, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3

		
	Copy and Paste the Result Below:
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+	


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

Yes, to some extent. I used the following codes to compute the square of the correlation coefficient between review_count and fans. The result shows the square of the correlation coefficient is around 0.437, which means the square of R is about 0.66. Based on the result, we can recognise that review_count has a positive correlation with the number of fans. 

SELECT 
	AVG( (review_count - avg_x) * (fans - avg_y) )*AVG( (review_count - avg_x) * (fans - avg_y) )/(var_x*var_y) AS R2 
FROM 
	user, 
	(SELECT 
		avg_x,
		avg_y,
		avg((review_count - avg_x)*(review_count - avg_x)) AS var_x, 
		avg((fans - avg_y)*(fans - avg_y)) AS var_y 
		FROM user, 
		(SELECT
          		avg(review_count) AS avg_x, 
          		avg(fans) AS avg_y 
          	FROM user)
  );

+----------------+
|             R2 |
+----------------+
| 0.437136492915 |
+----------------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
There are more reviews with the word "love".

	
	SQL code used to arrive at answer:

SELECT 
	(SELECT 
		COUNT(*)
	FROM review
	WHERE text LIKE '%hate%') AS num_hate
	, (SELECT 
		COUNT(*)
	FROM review
	WHERE text LIKE '%love%') AS num_love

+----------+----------+
| num_hate | num_love |
+----------+----------+
|      232 |     1780 |
+----------+----------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT 
	id
	, name
	, fans
FROM user
ORDER BY fans DESC
LIMIT 10	
	
	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

City: Las Vegas  Category: Shopping	
i. Do the two groups you chose to analyze have a different distribution of hours?
Yes. 

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes.

iii. Are you able to infer anything from the location data provided between these two groups? Explain.
No. There is not enough information related to location available for finding relations between two groups.

SQL code used for analysis:

SELECT
	CASE
	WHEN stars >= 4 THEN '4-5 stars'
	WHEN (stars >= 2 AND stars <= 3) THEN '2-3 stars'
	END AS rating
	, b.name
	, h.hours
	, b.review_count
	, b.address
	, b.neighborhood
FROM (business b INNER JOIN category c ON b.id = c.business_id) 
INNER JOIN hours h ON h.business_id = c.business_id
WHERE b.city = 'Las Vegas' 
AND c.category = 'Shopping'
AND rating IS NOT NULL
ORDER BY rating

+-----------+--------------------------------+----------------------+--------------+------------------------+--------------+
| rating    | name                           | hours                | review_count | address                | neighborhood |
+-----------+--------------------------------+----------------------+--------------+------------------------+--------------+
| 2-3 stars | Walgreens                      | Monday|8:00-22:00    |            6 | 3808 E Tropicana Ave   | Eastside     |
| 2-3 stars | Walgreens                      | Tuesday|8:00-22:00   |            6 | 3808 E Tropicana Ave   | Eastside     |
| 2-3 stars | Walgreens                      | Friday|8:00-22:00    |            6 | 3808 E Tropicana Ave   | Eastside     |
| 2-3 stars | Walgreens                      | Wednesday|8:00-22:00 |            6 | 3808 E Tropicana Ave   | Eastside     |
| 2-3 stars | Walgreens                      | Thursday|8:00-22:00  |            6 | 3808 E Tropicana Ave   | Eastside     |
| 2-3 stars | Walgreens                      | Sunday|8:00-22:00    |            6 | 3808 E Tropicana Ave   | Eastside     |
| 2-3 stars | Walgreens                      | Saturday|8:00-22:00  |            6 | 3808 E Tropicana Ave   | Eastside     |
| 4-5 stars | Red Rock Canyon Visitor Center | Monday|8:00-16:30    |           32 | 1000 Scenic Loop Dr    |              |
| 4-5 stars | Red Rock Canyon Visitor Center | Tuesday|8:00-16:30   |           32 | 1000 Scenic Loop Dr    |              |
| 4-5 stars | Red Rock Canyon Visitor Center | Friday|8:00-16:30    |           32 | 1000 Scenic Loop Dr    |              |
| 4-5 stars | Red Rock Canyon Visitor Center | Wednesday|8:00-16:30 |           32 | 1000 Scenic Loop Dr    |              |
| 4-5 stars | Red Rock Canyon Visitor Center | Thursday|8:00-16:30  |           32 | 1000 Scenic Loop Dr    |              |
| 4-5 stars | Red Rock Canyon Visitor Center | Sunday|8:00-16:30    |           32 | 1000 Scenic Loop Dr    |              |
| 4-5 stars | Red Rock Canyon Visitor Center | Saturday|8:00-16:30  |           32 | 1000 Scenic Loop Dr    |              |
| 4-5 stars | Desert Medical Equipment       | Friday|8:00-17:00    |            4 | 3555 W Reno Ave, Ste F |              |
| 4-5 stars | Desert Medical Equipment       | Tuesday|8:00-17:00   |            4 | 3555 W Reno Ave, Ste F |              |
| 4-5 stars | Desert Medical Equipment       | Thursday|8:00-17:00  |            4 | 3555 W Reno Ave, Ste F |              |
| 4-5 stars | Desert Medical Equipment       | Wednesday|8:00-17:00 |            4 | 3555 W Reno Ave, Ste F |              |
| 4-5 stars | Desert Medical Equipment       | Monday|8:00-17:00    |            4 | 3555 W Reno Ave, Ste F |              |
+-----------+--------------------------------+----------------------+--------------+------------------------+--------------+
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
Businesses that are open have more reviews than those are not open in average.          
         
ii. Difference 2:
Businesses that are open have a higher rating than those are not open in average.            
         
         
SQL code used for analysis:

SELECT 
	is_open
	, COUNT(id)
	, AVG(review_count)
	, AVG(stars)
FROM business
GROUP BY is_open

+---------+-----------+-------------------+---------------+
| is_open | COUNT(id) | AVG(review_count) |    AVG(stars) |
+---------+-----------+-------------------+---------------+
|       0 |      1520 |     23.1980263158 | 3.52039473684 |
|       1 |      8480 |     31.7570754717 | 3.67900943396 |
+---------+-----------+-------------------+---------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

Predicting the number of fans a user will have is an interesting problem to me.        
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I join table user and tip to get the data I need. The reason is that I suppose a user's number of fans is related to the user's active year, review count, number of useful/funny/cool reviews and compliments, and number of likes on their tips. There are other factors can be considered such as if the user is elite, the number of friends, etc, but I won't consider them for analysis at this stage.                           
                  
iii. Output of your finished dataset:
Please find them in the following section. The findings are:
1) There is no relation can be found between the numbers of likes and fans based on the datasets, because the number of likes is zero for all users in the user table.
2) Averagely, a user has been active on the platform for 9.2 years. 
3) We can make the prediction based on the average data:
   i) A review will bring 0.033 fan for a user, namely, 30 reviews will bring 1 fan for 1 user in average.
   ii) Reviews related to cool will bring more fans than funny, then useful in average. 1.3 cool reviews or 1.8 funny reviews or 4 useful reviews can bring 1 fan for a user in average.
   iii) 2.8 compliments can bring 1 fan for 1 user in average. 

         
iv. Provide the SQL code you used to create your final dataset:

SELECT
name
, DATE('NOW')-yelping_since AS years_active
, ROUND(fans*1.0/review_count,2) AS fans_per_review
, ROUND(fans*1.0/(useful+funny+cool+compliment_hot
+compliment_more+compliment_profile+compliment_cute
+compliment_list+compliment_note+compliment_plain
+compliment_funny+compliment_writer+compliment_photos),2) AS fans_per_compliment
, ROUND(fans*1.0/likes,2) AS fans_per_like
FROM user u LEFT JOIN tip t
ON u.id = t.user_id
GROUP BY name
ORDER BY fans DESC
LIMIT 10

+-----------+--------------+-----------------+---------------------+---------------+
| name      | years_active | fans_per_review | fans_per_compliment | fans_per_like |
+-----------+--------------+-----------------+---------------------+---------------+
| Gerald    |           10 |            0.13 |                0.01 |          None |
| Lissa     |           15 |            0.14 |                0.04 |          None |
| bernice   |           15 |            0.41 |                0.09 |          None |
| Roanna    |           16 |             0.1 |                0.02 |          None |
| .Hon      |           16 |            0.08 |                 0.0 |          None |
| Nieves    |            9 |            0.45 |                0.02 |          None |
| Sui       |           13 |             0.1 |                0.31 |          None |
| Koizumi   |           16 |            0.46 |                0.04 |          None |
| rebecca   |           14 |            11.5 |                None |          None |
| Princeton |           13 |            0.17 |                0.01 |          None |
+-----------+--------------+-----------------+---------------------+---------------+


SELECT
AVG(DATE('NOW')-yelping_since) AS avg_active_years
, AVG(ROUND(fans*1.0/review_count,2)) AS avg_fans_per_review
, AVG(ROUND(fans*1.0/useful,2)) AS avg_fans_per_useful
, AVG(ROUND(fans*1.0/funny,2)) AS avg_fans_per_funny
, AVG(ROUND(fans*1.0/cool,2)) AS avg_fans_per_cool
, AVG(ROUND(fans*1.0/(compliment_hot+compliment_more+compliment_profile+compliment_cute+compliment_list+compliment_note+compliment_plain+compliment_funny+compliment_writer+compliment_photos),2)) AS avg_fans_per_compliment
FROM user;

+------------------+---------------------+---------------------+--------------------+-------------------+-------------------------+
| avg_active_years | avg_fans_per_review | avg_fans_per_useful | avg_fans_per_funny | avg_fans_per_cool | avg_fans_per_compliment |
+------------------+---------------------+---------------------+--------------------+-------------------+-------------------------+
|           9.1995 |     0.0329976979281 |      0.240480232298 |           0.554375 |    0.784665787159 |          0.355391822828 |
+------------------+---------------------+---------------------+--------------------+-------------------+-------------------------+





